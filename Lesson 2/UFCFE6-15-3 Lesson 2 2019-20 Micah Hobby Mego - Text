INTRODUCTION

In the highly digital world we live in an online prescense is vital for any organisation looking to expand it's customer base.
With approximately 93% of the U.K's population having access to the internet (S. O'Dea, 2018).
There are approximately 175 billion euros worth of transactions and this is consistently growing every year, predicted to reach 200 billion in 2019 (Sabanoglu, 2019). CHECK STATISTIC
With traffic moving from the high-street to the internet (Butler, 2018), organisations are looking for complete development/hosting service packages especially if they don't have an in-house development team or the budget for several new hires required.
Circle Interactive provides hosting, maintanance, security audits and development as a simple and effective solution to clients looking to improve members and customers online experience.
They provide non-technical organisations with the opportunity to develop an online precense and services.

Over the last few months my organisation has faced increased demand from new clients.
Since a large portion of work involved with setup and software upgrades follows a predetermined workflow it has caused a bottleneck.
This is due to Circle Interactive currently only having 2 System Administrators, therefore a push has been made to reprioritize system admin time.
To achieve this they are training developpers to perform more server related tasks to allow them more time to focus on client responsabilities.

Currently at the organisation most developpers are more focused on implementing software solutions, with only the ocasional server related tasks.
With Sys. Admins requierd to perform setup, maintenance and upgrade tasks that Junior Developpers could easily cover with some training.
Since the influx of new clients, and due to there being more developpers than sys. Admins, simplifying setup and including developers in server maintanance and setup is crucial.
As part of the new initiative a new solution has been proposed that would allow Developpers to work more closely with sys. Admins on client projects.
By implementing Docker and using container technology, therefore allowing for enhanced benefits in version control, easier backups and upgrade.
This would potentially free up sys. admin time and provide developpers with additional tools and knowledge when developping for a client.

This paper intends to cover the issues related to implementing docker into the organisations workflow.
Covering related concerns about security, energy usage and efficiency around this upcoming technology.
It aims to understand the benefits of Docker by looking at previous research conducted implementing containerisation.
It also covers academic journals on the benefits/drawbacks of it's use, and analyses whether it should be implemented at Circle Interactive.

------------------------------------------------------------------------------------------------------------

LITERATURE REVIEW

Container based applications have been described by Rad et.al, (2017) as having the advantage of 'speed, portability, scalability, rapid delivery, and density'.
They have the advantage of being very small and are therefore very quick to build, develop, test and deploy.
This paper measures and compares the performance of Docker and Virtual Machines.
It further outlines the advantages of using docker containers over traditional bare-metal systems.
It overall provides a performance based overview for each technology, and performs a broad analysis of the various systems.

For comparison of actual system performance Felter et.al (2015), contrasted CPU, memory and IO performance of virtual machines and containers.
The evaluation was carried out using MySQL as the benchmark, it's objective was to find what performance overhead if any, is caused
for I/O intensive workloads. This paper was highly quantitative and technical and provides clear definitive evidence of performance overhead.

Another study by Boettiger (2014) has analysed containerisation focusesing on 4 technical challenges faced by containers.
This paper was more qualitative in nature and provides more organisational and human challenges and benefits of containerisation such as:

1.Dependancy Hell, where less than 50% of software studied could be succesfully built or installed.
Since Researchers were unable to recreate the original software conditiones, they were unable to run it.
This was due to outdated or unmet software dependencies. 
This is a challenged currently faced by Circle Interactive, due to older versions which clients have not paid to be maintained,
rendering them useless once they break.

2.Imprecise Documentation on how to reproduce the conditions to run the code.
This was seen as a major barrier to entry and prevents researches from being able to even build the software.
This problem affected around 70% of the projects covered in the study.
Circle Interactive faces a similar challenged due to tight development cycles, incomplete documentation sometimes hinders proggress, 
especially on legacy software developped by members who have left the team. 

3.Code Rot. Changes in a projects dependancies such as bugfixes or new development can change results of the applications being tested.
It is important that any solution can be proven to be robust against such changes, especially when there are updates that improve
a software's API, and possibly depracate functionallity.

4.Barriers to adoption & re-use
The study found that available solutions such as workflow software, virtual machines, continous integration servirces,
create a barrier to entry since they require additional effort to overcome the learning of the service. 
This causes additional and unnescesary effort and might discourage contributing to a project.
Also if it is not easy to make code available for extension less people are likely to do it.
Circle Interactive could benefit from making solutions implemented easier to re-use on other projects.

The paper focuses on alternative solutions to both academic software and software development in general.
It outlines how Docker and containerisation solves these issues and what benefits it provides.
It provided evidence to demonstrate how the technology could integrate with Circle Interactive

As for research into energy consumption and energy efficiency:
Research by Santos et.al (2018) was made into energy consumption of docker container workloads compared to bare-metal systems.
Raun et.al (2016) tested file mount implementation and port mapping, research was performed on available cloud containers from Amazon & Google.
All this research intends to sumarise quantitive metrics of docker performance.
It provided quantitative research and very definitive answers to containerisation.

And finally, Bui (2015) conducted research into the security of Docker.
This is in comparison to bare-metal systems and virtual machines, 
it analyses the internal security of Docker and how Docler interacts with security features of the Linux kernel.
This paper lacked analysis of real world threat models and focused more on analysis of existing security.

---------------------------------------------------------------------------------------------------------

METHODOLOGY

This topic initially arose as part of the companies yearly review, as an attempt at streamlining the organisations operations. 

To ensure the solution was relevant, conversations were held with the Head Sys Admin Robert, as well as the Head Developper and Student Manager.
From these conversations it was clear, docker offered a clear separation of responsabilities and allowed for developpers to perform more tasks therefore freeing up Sys. Admin time.
It was referred to as an 'organisational goal' by the Student Manager.

From there research was conducted into the feasability of containers.
While informing the research for this paper, a variety of sources were employed including:
- The UWE library and Google Scholar to locate relevant literature and research papers.
- Academic Journals.
- Dockers whitepaper and organisational case studies.
- Official company statistics and journal information to inform comparisons.
After the initial research, more investigation was conducted into areas of concern to Circle Interactive.
Particular interest was shown in regards to current workflow, which employ VMs and bare-metal (no virtualisation or containerisation) systems. 
Therefore analysis into performance, energy efficiency and security were needed.
An informal study was also carried out to determine the time difference in setup between the above mentioned. 
This would provide a real world estimate of implementing this solution.

---------------------------------------------------------------------------------------------------------

FINDINGS

From all the research conducted there appear to be 4 separate challenges when implementing docker in DevOps.

- Security: From analysis conducted by Thang Bui (2015), it was determined that Docker provides a high level of isolation and resource limiting, through the use of cgroups, copy-on-write file system, and  name spaces.
They stated docker containers are secure out of the box and can be hardened by running them as "non-privileged".
It is also stated that using docker is comparable in safety to using a VM and offers similar security mechanisms.

- Performance:  Findings from studies by Santos et.al (2018) indicate that Containerisation is of low overhead compared the virtualization with Virtual Machines.
It is a lightweight alternative with better performance than a VM, as it offers isolation and resource control without the overhead of an additional kernel for each instance of a container.
They found that docker is now displacing virtual machines as the virtualization solution of choice.
Docker allows for hundreds of containers on a single system making it efficient.

In a similar set of tests by Felter et.al (2015), comparing memory, IO and network performance they found Docker outperforms KVM.
On similar Redis and MySQL databases, Docker performs just as well as bare-metal Linux after configuration.

A third set of experiments conducted by Ruan et al. (2016) found that dockers file mount implementation and port mapping
cause higher I/O latency. The experiment performed research on available cloud containers from Amazon & Google and concluced
that containerisation is only feasable on baremetal, and not inside VMs.

Overall the research indicates containers are more efficient with less performance overhead than VM's.
However compared to baremetal that can be upto a 5% decrease in I/O operations performance.

- Energy Efficiency: Santos et.al (2018) studied energy consumption of docker containers compared to bare-metal systems and
found that when running similar processes on both systems containers show an increase in average power consumption of around 2W.

- Ease of Use and re-usability: The use of containers allows for effective version control and versioning since Dockerfiles are small and plaintext, ideal for git.
As research by Boettiger (2014) indicates Docker also handles the packaging and execution of a container so that it works identically accross different machines.
This lowers the barrier to entry and increases opportunities for reuse and quick deployment. 
Conternerisation allows for a program to work identically accross different platforms and enviorments.

It is also good to note that according to Santos et.al (2018) containerisation and docker is being adopted at a blistering pace, and has become an integral part of DevOps.
Since it runs on GNU/Linux based systems it can be deployed to around 67% of server side devices. (Finley, 2016)

-----------------------------------------------------------------------------------------------------------

DISCUSION

Docker provides a complete binary image where all the software including dependencies has been configured and tested
and is ready for easy distribution and setup.
It immediately improves a projects imprecise documentation, by providing a
simple script that includes everyhing required, allowing for efficient version control and reducing setup time on different machines and systems.
Using conternerisation also tackles the issue of code-rot, which ocur when changes to dependancies are intruced with new versions.
These can be caused by security fixes, new features or fixes to depracation.
Without docker and containerisation it would be difficult to track when code-rot happens.
And finally Docker lowers the barrier of entry for utilizing and further extending software.
Especially in the context of open source software, such as that used at Circle Interactive, it is important that coude re-use and
low barriers to entry are present.

In terms of security Docker and containerised applications have adequate security compared to bare metal solutions.
As for performancem there is a slight decrease in raw performance when compared to bare-metal.
Due to the previously mentioned slight disadvantages an organisation might be discouraged about the overall value docker provides.
However these disadvantages aremore than made up for by the value of containirisation and the benefits provided in the forms of time & cost savings.
In energy efficiency, the increased 2W in power consumption can be offset by dynamic power consumption, only using what is needed and scaling down in periods of low demand.

Currently Circle Interactiv's workflow includes 3 working enviorments: 'develop', 'test', and 'production'. After a weekly development sprint work must be ported to a test enviorment or to production.
This requires a non trivial amount of time to properly port new changes and merge enviorments for deployment.
With a Docker setup Circle Interactive could benefit from containerisation, allowing near instant pack, port and unpack to the new enviorment, while still maintaining the nescesary version control and redundancy.
It is important to note that docker would allow Circle Interactive to handle an increased customer influx, as it would increase productivity for sysAdmins and developpers, and reduce the time spent on version control and setup.


-----------------------------------------------------------------------------------------------------------

CONCLUSION

Implementing Docker at Circle Interactive would provide a number of clear benefits:
It would also improve the quality of the current documentation, by providing up to date and complete information on the current instalation.
This includes dependancies, current software version and clear instructions to reproduce it.
It would also be extremely benefitial during software releases as it would provide an easy pathway to upgrade.

Docker containers allow for the separation of inside and outside of the container.
It allows for system admins to deploy and maintain the server with containers,
and for the proggramer to look after the applications inside the docker container.

This would shift the current responsability of sys admins to maintain both inside and outside
and allow developpers to manage the whole installation and development process.
It would allow containers to work in every enviorment with dependencies embeded within the applications.
Therefore providing a reliable, consistent and improved enviorment allowing for predictable results.

It allows for more containers to be run on a single host, therefore offering higher density and no overhead wastage of resources.
Circle Interactive would benefit from the increased simplicity of deploying new changes and could improve it's version control.
Overall it would allow the organisation to provide better service to the client and to operate more efficiently as an organisation.
It would also strenghten their commitments to contributing to the community, by lowering the barrier to entry and encouraging re-use.

In conclusion the benefits of docker far outweight the negatives.
Therefore Circle Interactive would benefit from implementing the technology at every stage of production, deployment and maintanance on their clients software.
After conducting this research it is very clear why docker and containerisation are becoming so widely used, 
from industries such as online-gaming to e-commerce.
It is clear that Docker will continue to grow in popularity and adoption, it has a clear place in DevOps.

-----------------------------------------------------------------------------------------------------------

RECOMENDATIONS

After analysing Circle Interactive's requirements and organisational workflow, 
it is clear that Circle Interactive should continue to implement a stronger policy to include the use of docker, 
into any future client work.
To ensure that legacy software does not become unusable,
they should also offer already existing clients the opportnity to upgrade to Docker at a slightly subsidised rate.
As this would benefit both the client and Cirlce Interactive, with shorter development, backup and troubleshooting times.
Due to it's wide adoption in the industry it is very likely clients would approve the adoption and would desire their software in a container.
Circle should continue their current path to adoption and should continue to ensure their clients up to date reliable software. 

-----------------------------------------------------------------------------------------------------------



